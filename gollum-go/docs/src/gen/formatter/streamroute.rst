.. Autogenerated by Gollum RST generator (docs/generator/*.go)

StreamRoute
===========

StreamRoute is a formatter that modifies a message's stream by reading a
prefix from the message's data (and discarding it).
The prefix is defined as everything before a given delimiter in the
message. If no delimiter is found or the prefix is empty the message stream
is not changed.




Parameters
----------

**Delimiter** (default: :)

  This value defines the delimiter to search when extracting the stream name.
  By default this parameter is set to ":".
  
  

**StreamModulator**

  A list of further modulators to format and filter the extracted stream name.
  By default this parameter is "empty".
  
  

Parameters (from core.SimpleFormatter)
--------------------------------------

**Source**

  This value chooses the part of the message the data to be formatted
  should be read from. Use "" to target the message payload; other values
  specify the name of a metadata field to target.
  By default this parameter is set to "".
  
  

**Target**

  This value chooses the part of the message the formatted data
  should be stored to. Use "" to target the message payload; other values
  specify the name of a metadata field to target.
  By default this parameter is set to "".
  
  

**ApplyTo**

  Use this to set Source and Target to the same value. This setting
  will be ignored if either Source or Target is set to something else but "".
  By default this parameter is set to "".
  
  

**SkipIfEmpty**

  When set to true, this formatter will not be applied to data
  that is empty or - in case of metadata - not existing.
  By default this parameter is set to false
  
  

Examples
--------

This example sets the stream name for messages like `<error>:a message string` to `error`
and `a message string` as payload:

.. code-block:: yaml

	 exampleConsumer:
	   Type: consumer.Console
	   Streams: "*"
	   Modulators:
	     - format.StreamRoute:
	       Delimiter: ":"
	       StreamModulator:
	         - format.Trim:
	           LeftSeparator: <
	           RightSeparator: >





